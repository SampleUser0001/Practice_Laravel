1654604599
aG%2BmXEj3d4%3A8dab1ccec64dc04a454c56ff42072471-d334193a5b7e692bb30602f773caea3a
s:13308:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6ImQzMzQxOTNhNWI3ZTY5MmJiMzA2MDJmNzczY2FlYTNhIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTE6InNlc3Npb24ucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6NjA6InZlbmRvci9zeW1mb255L2ZyYW1ld29yay1idW5kbGUvUmVzb3VyY2VzL2NvbmZpZy9zZXNzaW9uLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6ODg3MDoiPD9waHAKCi8qCiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBTeW1mb255IHBhY2thZ2UuCiAqCiAqIChjKSBGYWJpZW4gUG90ZW5jaWVyIDxmYWJpZW5Ac3ltZm9ueS5jb20+CiAqCiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3IHRoZSBMSUNFTlNFCiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLgogKi8KCm5hbWVzcGFjZSBTeW1mb255XENvbXBvbmVudFxEZXBlbmRlbmN5SW5qZWN0aW9uXExvYWRlclxDb25maWd1cmF0b3I7Cgp1c2UgU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXFNlc3Npb25cRGVwcmVjYXRlZFNlc3Npb25GYWN0b3J5Owp1c2UgU3ltZm9ueVxDb21wb25lbnRcSHR0cEZvdW5kYXRpb25cU2Vzc2lvblxBdHRyaWJ1dGVcQXR0cmlidXRlQmFnOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcSHR0cEZvdW5kYXRpb25cU2Vzc2lvblxGbGFzaFxGbGFzaEJhZzsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XEh0dHBGb3VuZGF0aW9uXFNlc3Npb25cRmxhc2hcRmxhc2hCYWdJbnRlcmZhY2U7CnVzZSBTeW1mb255XENvbXBvbmVudFxIdHRwRm91bmRhdGlvblxTZXNzaW9uXFNlc3Npb247CnVzZSBTeW1mb255XENvbXBvbmVudFxIdHRwRm91bmRhdGlvblxTZXNzaW9uXFNlc3Npb25GYWN0b3J5Owp1c2UgU3ltZm9ueVxDb21wb25lbnRcSHR0cEZvdW5kYXRpb25cU2Vzc2lvblxTZXNzaW9uSW50ZXJmYWNlOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcSHR0cEZvdW5kYXRpb25cU2Vzc2lvblxTdG9yYWdlXEhhbmRsZXJcQWJzdHJhY3RTZXNzaW9uSGFuZGxlcjsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XEh0dHBGb3VuZGF0aW9uXFNlc3Npb25cU3RvcmFnZVxIYW5kbGVyXElkZW50aXR5TWFyc2hhbGxlcjsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XEh0dHBGb3VuZGF0aW9uXFNlc3Npb25cU3RvcmFnZVxIYW5kbGVyXE1hcnNoYWxsaW5nU2Vzc2lvbkhhbmRsZXI7CnVzZSBTeW1mb255XENvbXBvbmVudFxIdHRwRm91bmRhdGlvblxTZXNzaW9uXFN0b3JhZ2VcSGFuZGxlclxOYXRpdmVGaWxlU2Vzc2lvbkhhbmRsZXI7CnVzZSBTeW1mb255XENvbXBvbmVudFxIdHRwRm91bmRhdGlvblxTZXNzaW9uXFN0b3JhZ2VcSGFuZGxlclxTZXNzaW9uSGFuZGxlckZhY3Rvcnk7CnVzZSBTeW1mb255XENvbXBvbmVudFxIdHRwRm91bmRhdGlvblxTZXNzaW9uXFN0b3JhZ2VcSGFuZGxlclxTdHJpY3RTZXNzaW9uSGFuZGxlcjsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XEh0dHBGb3VuZGF0aW9uXFNlc3Npb25cU3RvcmFnZVxNZXRhZGF0YUJhZzsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XEh0dHBGb3VuZGF0aW9uXFNlc3Npb25cU3RvcmFnZVxNb2NrRmlsZVNlc3Npb25TdG9yYWdlOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcSHR0cEZvdW5kYXRpb25cU2Vzc2lvblxTdG9yYWdlXE1vY2tGaWxlU2Vzc2lvblN0b3JhZ2VGYWN0b3J5Owp1c2UgU3ltZm9ueVxDb21wb25lbnRcSHR0cEZvdW5kYXRpb25cU2Vzc2lvblxTdG9yYWdlXE5hdGl2ZVNlc3Npb25TdG9yYWdlOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcSHR0cEZvdW5kYXRpb25cU2Vzc2lvblxTdG9yYWdlXE5hdGl2ZVNlc3Npb25TdG9yYWdlRmFjdG9yeTsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XEh0dHBGb3VuZGF0aW9uXFNlc3Npb25cU3RvcmFnZVxQaHBCcmlkZ2VTZXNzaW9uU3RvcmFnZTsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XEh0dHBGb3VuZGF0aW9uXFNlc3Npb25cU3RvcmFnZVxQaHBCcmlkZ2VTZXNzaW9uU3RvcmFnZUZhY3Rvcnk7CnVzZSBTeW1mb255XENvbXBvbmVudFxIdHRwRm91bmRhdGlvblxTZXNzaW9uXFN0b3JhZ2VcU2VydmljZVNlc3Npb25GYWN0b3J5Owp1c2UgU3ltZm9ueVxDb21wb25lbnRcSHR0cEZvdW5kYXRpb25cU2Vzc2lvblxTdG9yYWdlXFNlc3Npb25TdG9yYWdlSW50ZXJmYWNlOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcSHR0cEtlcm5lbFxFdmVudExpc3RlbmVyXFNlc3Npb25MaXN0ZW5lcjsKCnJldHVybiBzdGF0aWMgZnVuY3Rpb24gKENvbnRhaW5lckNvbmZpZ3VyYXRvciAkY29udGFpbmVyKSB7CiAgICAkY29udGFpbmVyLT5wYXJhbWV0ZXJzKCktPnNldCgnc2Vzc2lvbi5tZXRhZGF0YS5zdG9yYWdlX2tleScsICdfc2YyX21ldGEnKTsKCiAgICAkY29udGFpbmVyLT5zZXJ2aWNlcygpCiAgICAgICAgLT5zZXQoJy5zZXNzaW9uLmRvLW5vdC11c2UnLCBTZXNzaW9uOjpjbGFzcykgLy8gdG8gYmUgcmVtb3ZlZCBpbiA2LjAKICAgICAgICAgICAgLT5mYWN0b3J5KFtzZXJ2aWNlKCdzZXNzaW9uLmZhY3RvcnknKSwgJ2NyZWF0ZVNlc3Npb24nXSkKICAgICAgICAtPnNldCgnc2Vzc2lvbi5mYWN0b3J5JywgU2Vzc2lvbkZhY3Rvcnk6OmNsYXNzKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgc2VydmljZSgncmVxdWVzdF9zdGFjaycpLAogICAgICAgICAgICAgICAgc2VydmljZSgnc2Vzc2lvbi5zdG9yYWdlLmZhY3RvcnknKSwKICAgICAgICAgICAgICAgIFtzZXJ2aWNlKCdzZXNzaW9uX2xpc3RlbmVyJyksICdvblNlc3Npb25Vc2FnZSddLAogICAgICAgICAgICBdKQoKICAgICAgICAtPnNldCgnc2Vzc2lvbi5zdG9yYWdlLmZhY3RvcnkubmF0aXZlJywgTmF0aXZlU2Vzc2lvblN0b3JhZ2VGYWN0b3J5OjpjbGFzcykKICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgIHBhcmFtKCdzZXNzaW9uLnN0b3JhZ2Uub3B0aW9ucycpLAogICAgICAgICAgICAgICAgc2VydmljZSgnc2Vzc2lvbi5oYW5kbGVyJyksCiAgICAgICAgICAgICAgICBpbmxpbmVfc2VydmljZShNZXRhZGF0YUJhZzo6Y2xhc3MpCiAgICAgICAgICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW0oJ3Nlc3Npb24ubWV0YWRhdGEuc3RvcmFnZV9rZXknKSwKICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW0oJ3Nlc3Npb24ubWV0YWRhdGEudXBkYXRlX3RocmVzaG9sZCcpLAogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgZmFsc2UsCiAgICAgICAgICAgIF0pCiAgICAgICAgLT5zZXQoJ3Nlc3Npb24uc3RvcmFnZS5mYWN0b3J5LnBocF9icmlkZ2UnLCBQaHBCcmlkZ2VTZXNzaW9uU3RvcmFnZUZhY3Rvcnk6OmNsYXNzKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgc2VydmljZSgnc2Vzc2lvbi5oYW5kbGVyJyksCiAgICAgICAgICAgICAgICBpbmxpbmVfc2VydmljZShNZXRhZGF0YUJhZzo6Y2xhc3MpCiAgICAgICAgICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW0oJ3Nlc3Npb24ubWV0YWRhdGEuc3RvcmFnZV9rZXknKSwKICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW0oJ3Nlc3Npb24ubWV0YWRhdGEudXBkYXRlX3RocmVzaG9sZCcpLAogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgZmFsc2UsCiAgICAgICAgICAgIF0pCiAgICAgICAgLT5zZXQoJ3Nlc3Npb24uc3RvcmFnZS5mYWN0b3J5Lm1vY2tfZmlsZScsIE1vY2tGaWxlU2Vzc2lvblN0b3JhZ2VGYWN0b3J5OjpjbGFzcykKICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgIHBhcmFtKCdrZXJuZWwuY2FjaGVfZGlyJykuJy9zZXNzaW9ucycsCiAgICAgICAgICAgICAgICAnTU9DS1NFU1NJRCcsCiAgICAgICAgICAgICAgICBpbmxpbmVfc2VydmljZShNZXRhZGF0YUJhZzo6Y2xhc3MpCiAgICAgICAgICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW0oJ3Nlc3Npb24ubWV0YWRhdGEuc3RvcmFnZV9rZXknKSwKICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW0oJ3Nlc3Npb24ubWV0YWRhdGEudXBkYXRlX3RocmVzaG9sZCcpLAogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICBdKQogICAgICAgIC0+c2V0KCdzZXNzaW9uLnN0b3JhZ2UuZmFjdG9yeS5zZXJ2aWNlJywgU2VydmljZVNlc3Npb25GYWN0b3J5OjpjbGFzcykKICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ3Nlc3Npb24uc3RvcmFnZScpLAogICAgICAgICAgICBdKQogICAgICAgICAgICAtPmRlcHJlY2F0ZSgnc3ltZm9ueS9mcmFtZXdvcmstYnVuZGxlJywgJzUuMycsICdUaGUgIiVzZXJ2aWNlX2lkJSIgc2VydmljZSBpcyBkZXByZWNhdGVkLCB1c2UgInNlc3Npb24uc3RvcmFnZS5mYWN0b3J5Lm5hdGl2ZSIsICJzZXNzaW9uLnN0b3JhZ2UuZmFjdG9yeS5waHBfYnJpZGdlIiBvciAic2Vzc2lvbi5zdG9yYWdlLmZhY3RvcnkubW9ja19maWxlIiBpbnN0ZWFkLicpCgogICAgICAgIC0+c2V0KCcuc2Vzc2lvbi5kZXByZWNhdGVkJywgU2Vzc2lvbkludGVyZmFjZTo6Y2xhc3MpIC8vIHRvIGJlIHJlbW92ZWQgaW4gNi4wCiAgICAgICAgICAgIC0+ZmFjdG9yeShbaW5saW5lX3NlcnZpY2UoRGVwcmVjYXRlZFNlc3Npb25GYWN0b3J5OjpjbGFzcyktPmFyZ3MoW3NlcnZpY2UoJ3JlcXVlc3Rfc3RhY2snKV0pLCAnZ2V0U2Vzc2lvbiddKQogICAgICAgIC0+YWxpYXMoU2Vzc2lvbkludGVyZmFjZTo6Y2xhc3MsICcuc2Vzc2lvbi5kby1ub3QtdXNlJykKICAgICAgICAgICAgLT5kZXByZWNhdGUoJ3N5bWZvbnkvZnJhbWV3b3JrLWJ1bmRsZScsICc1LjMnLCAnVGhlICIlYWxpYXNfaWQlIiBhbmQgIlNlc3Npb25JbnRlcmZhY2UiIGFsaWFzZXMgYXJlIGRlcHJlY2F0ZWQsIHVzZSAiJHJlcXVlc3RTdGFjay0+Z2V0U2Vzc2lvbigpIiBpbnN0ZWFkLicpCiAgICAgICAgLT5hbGlhcyhTZXNzaW9uU3RvcmFnZUludGVyZmFjZTo6Y2xhc3MsICdzZXNzaW9uLnN0b3JhZ2UnKQogICAgICAgICAgICAtPmRlcHJlY2F0ZSgnc3ltZm9ueS9mcmFtZXdvcmstYnVuZGxlJywgJzUuMycsICdUaGUgIiVhbGlhc19pZCUiIGFsaWFzIGlzIGRlcHJlY2F0ZWQsIHVzZSAic2Vzc2lvbi5zdG9yYWdlLmZhY3RvcnkiIGluc3RlYWQuJykKICAgICAgICAtPmFsaWFzKFxTZXNzaW9uSGFuZGxlckludGVyZmFjZTo6Y2xhc3MsICdzZXNzaW9uLmhhbmRsZXInKQoKICAgICAgICAtPnNldCgnc2Vzc2lvbi5zdG9yYWdlLm1ldGFkYXRhX2JhZycsIE1ldGFkYXRhQmFnOjpjbGFzcykKICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgIHBhcmFtKCdzZXNzaW9uLm1ldGFkYXRhLnN0b3JhZ2Vfa2V5JyksCiAgICAgICAgICAgICAgICBwYXJhbSgnc2Vzc2lvbi5tZXRhZGF0YS51cGRhdGVfdGhyZXNob2xkJyksCiAgICAgICAgICAgIF0pCiAgICAgICAgICAgIC0+ZGVwcmVjYXRlKCdzeW1mb255L2ZyYW1ld29yay1idW5kbGUnLCAnNS4zJywgJ1RoZSAiJXNlcnZpY2VfaWQlIiBzZXJ2aWNlIGlzIGRlcHJlY2F0ZWQsIGNyZWF0ZSB5b3VyIG93biAic2Vzc2lvbi5zdG9yYWdlLmZhY3RvcnkiIGluc3RlYWQuJykKCiAgICAgICAgLT5zZXQoJ3Nlc3Npb24uc3RvcmFnZS5uYXRpdmUnLCBOYXRpdmVTZXNzaW9uU3RvcmFnZTo6Y2xhc3MpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBwYXJhbSgnc2Vzc2lvbi5zdG9yYWdlLm9wdGlvbnMnKSwKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ3Nlc3Npb24uaGFuZGxlcicpLAogICAgICAgICAgICAgICAgc2VydmljZSgnc2Vzc2lvbi5zdG9yYWdlLm1ldGFkYXRhX2JhZycpLAogICAgICAgICAgICBdKQogICAgICAgICAgICAtPmRlcHJlY2F0ZSgnc3ltZm9ueS9mcmFtZXdvcmstYnVuZGxlJywgJzUuMycsICdUaGUgIiVzZXJ2aWNlX2lkJSIgc2VydmljZSBpcyBkZXByZWNhdGVkLCB1c2UgInNlc3Npb24uc3RvcmFnZS5mYWN0b3J5Lm5hdGl2ZSIgaW5zdGVhZC4nKQoKICAgICAgICAtPnNldCgnc2Vzc2lvbi5zdG9yYWdlLnBocF9icmlkZ2UnLCBQaHBCcmlkZ2VTZXNzaW9uU3RvcmFnZTo6Y2xhc3MpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdzZXNzaW9uLmhhbmRsZXInKSwKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ3Nlc3Npb24uc3RvcmFnZS5tZXRhZGF0YV9iYWcnKSwKICAgICAgICAgICAgXSkKICAgICAgICAgICAgLT5kZXByZWNhdGUoJ3N5bWZvbnkvZnJhbWV3b3JrLWJ1bmRsZScsICc1LjMnLCAnVGhlICIlc2VydmljZV9pZCUiIHNlcnZpY2UgaXMgZGVwcmVjYXRlZCwgdXNlICJzZXNzaW9uLnN0b3JhZ2UuZmFjdG9yeS5waHBfYnJpZGdlIiBpbnN0ZWFkLicpCgogICAgICAgIC0+c2V0KCdzZXNzaW9uLmZsYXNoX2JhZycsIEZsYXNoQmFnOjpjbGFzcykKICAgICAgICAgICAgLT5mYWN0b3J5KFtzZXJ2aWNlKCcuc2Vzc2lvbi5kby1ub3QtdXNlJyksICdnZXRGbGFzaEJhZyddKQogICAgICAgICAgICAtPmRlcHJlY2F0ZSgnc3ltZm9ueS9mcmFtZXdvcmstYnVuZGxlJywgJzUuMScsICdUaGUgIiVzZXJ2aWNlX2lkJSIgc2VydmljZSBpcyBkZXByZWNhdGVkLCB1c2UgIiRzZXNzaW9uLT5nZXRGbGFzaEJhZygpIiBpbnN0ZWFkLicpCiAgICAgICAgLT5hbGlhcyhGbGFzaEJhZ0ludGVyZmFjZTo6Y2xhc3MsICdzZXNzaW9uLmZsYXNoX2JhZycpCgogICAgICAgIC0+c2V0KCdzZXNzaW9uLmF0dHJpYnV0ZV9iYWcnLCBBdHRyaWJ1dGVCYWc6OmNsYXNzKQogICAgICAgICAgICAtPmZhY3RvcnkoW3NlcnZpY2UoJy5zZXNzaW9uLmRvLW5vdC11c2UnKSwgJ2dldEJhZyddKQogICAgICAgICAgICAtPmFyZ3MoWydhdHRyaWJ1dGVzJ10pCiAgICAgICAgICAgIC0+ZGVwcmVjYXRlKCdzeW1mb255L2ZyYW1ld29yay1idW5kbGUnLCAnNS4xJywgJ1RoZSAiJXNlcnZpY2VfaWQlIiBzZXJ2aWNlIGlzIGRlcHJlY2F0ZWQsIHVzZSAiJHNlc3Npb24tPmdldEF0dHJpYnV0ZUJhZygpIiBpbnN0ZWFkLicpCgogICAgICAgIC0+c2V0KCdzZXNzaW9uLnN0b3JhZ2UubW9ja19maWxlJywgTW9ja0ZpbGVTZXNzaW9uU3RvcmFnZTo6Y2xhc3MpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBwYXJhbSgna2VybmVsLmNhY2hlX2RpcicpLicvc2Vzc2lvbnMnLAogICAgICAgICAgICAgICAgJ01PQ0tTRVNTSUQnLAogICAgICAgICAgICAgICAgc2VydmljZSgnc2Vzc2lvbi5zdG9yYWdlLm1ldGFkYXRhX2JhZycpLAogICAgICAgICAgICBdKQogICAgICAgICAgICAtPmRlcHJlY2F0ZSgnc3ltZm9ueS9mcmFtZXdvcmstYnVuZGxlJywgJzUuMycsICdUaGUgIiVzZXJ2aWNlX2lkJSIgc2VydmljZSBpcyBkZXByZWNhdGVkLCB1c2UgInNlc3Npb24uc3RvcmFnZS5mYWN0b3J5Lm1vY2tfZmlsZSIgaW5zdGVhZC4nKQoKICAgICAgICAtPnNldCgnc2Vzc2lvbi5oYW5kbGVyLm5hdGl2ZV9maWxlJywgU3RyaWN0U2Vzc2lvbkhhbmRsZXI6OmNsYXNzKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgaW5saW5lX3NlcnZpY2UoTmF0aXZlRmlsZVNlc3Npb25IYW5kbGVyOjpjbGFzcykKICAgICAgICAgICAgICAgICAgICAtPmFyZ3MoW3BhcmFtKCdzZXNzaW9uLnNhdmVfcGF0aCcpXSksCiAgICAgICAgICAgIF0pCgogICAgICAgIC0+c2V0KCdzZXNzaW9uLmFic3RyYWN0X2hhbmRsZXInLCBBYnN0cmFjdFNlc3Npb25IYW5kbGVyOjpjbGFzcykKICAgICAgICAgICAgLT5mYWN0b3J5KFtTZXNzaW9uSGFuZGxlckZhY3Rvcnk6OmNsYXNzLCAnY3JlYXRlSGFuZGxlciddKQogICAgICAgICAgICAtPmFyZ3MoW2Fic3RyYWN0X2FyZygnQSBzdHJpbmcgb3IgYSBjb25uZWN0aW9uIG9iamVjdCcpXSkKCiAgICAgICAgLT5zZXQoJ3Nlc3Npb25fbGlzdGVuZXInLCBTZXNzaW9uTGlzdGVuZXI6OmNsYXNzKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgc2VydmljZV9sb2NhdG9yKFsKICAgICAgICAgICAgICAgICAgICAnc2Vzc2lvbicgPT4gc2VydmljZSgnLnNlc3Npb24uZG8tbm90LXVzZScpLT5pZ25vcmVPbkludmFsaWQoKSwKICAgICAgICAgICAgICAgICAgICAnaW5pdGlhbGl6ZWRfc2Vzc2lvbicgPT4gc2VydmljZSgnLnNlc3Npb24uZG8tbm90LXVzZScpLT5pZ25vcmVPblVuaW5pdGlhbGl6ZWQoKSwKICAgICAgICAgICAgICAgICAgICAnbG9nZ2VyJyA9PiBzZXJ2aWNlKCdsb2dnZXInKS0+aWdub3JlT25JbnZhbGlkKCksCiAgICAgICAgICAgICAgICAgICAgJ3Nlc3Npb25fY29sbGVjdG9yJyA9PiBzZXJ2aWNlKCdkYXRhX2NvbGxlY3Rvci5yZXF1ZXN0LnNlc3Npb25fY29sbGVjdG9yJyktPmlnbm9yZU9uSW52YWxpZCgpLAogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBwYXJhbSgna2VybmVsLmRlYnVnJyksCiAgICAgICAgICAgIF0pCiAgICAgICAgICAgIC0+dGFnKCdrZXJuZWwuZXZlbnRfc3Vic2NyaWJlcicpCgogICAgICAgIC8vIGZvciBCQwogICAgICAgIC0+YWxpYXMoJ3Nlc3Npb24uc3RvcmFnZS5maWxlc3lzdGVtJywgJ3Nlc3Npb24uc3RvcmFnZS5tb2NrX2ZpbGUnKQogICAgICAgICAgICAtPmRlcHJlY2F0ZSgnc3ltZm9ueS9mcmFtZXdvcmstYnVuZGxlJywgJzUuMycsICdUaGUgIiVhbGlhc19pZCUiIGFsaWFzIGlzIGRlcHJlY2F0ZWQsIHVzZSAic2Vzc2lvbi5zdG9yYWdlLmZhY3RvcnkubW9ja19maWxlIiBpbnN0ZWFkLicpCgogICAgICAgIC0+c2V0KCdzZXNzaW9uLm1hcnNoYWxsZXInLCBJZGVudGl0eU1hcnNoYWxsZXI6OmNsYXNzKQoKICAgICAgICAtPnNldCgnc2Vzc2lvbi5tYXJzaGFsbGluZ19oYW5kbGVyJywgTWFyc2hhbGxpbmdTZXNzaW9uSGFuZGxlcjo6Y2xhc3MpCiAgICAgICAgICAgIC0+ZGVjb3JhdGUoJ3Nlc3Npb24uaGFuZGxlcicpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdzZXNzaW9uLm1hcnNoYWxsaW5nX2hhbmRsZXIuaW5uZXInKSwKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ3Nlc3Npb24ubWFyc2hhbGxlcicpLAogICAgICAgICAgICBdKQogICAgOwp9OwoiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YToxOntzOjU4OiJcU3ltZm9ueVxDb21wb25lbnRcRGVwZW5kZW5jeUluamVjdGlvblxMb2FkZXJcQ29uZmlndXJhdG9yIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NTg6IlxTeW1mb255XENvbXBvbmVudFxEZXBlbmRlbmN5SW5qZWN0aW9uXExvYWRlclxDb25maWd1cmF0b3IiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMjoiQ29uZmlndXJhdG9yIjt9fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e319";